# -*- coding: utf-8 -*-
"""
/***************************************************************************
 renderUPDialog
                                 A QGIS plugin
 编制方案渲染出图工具
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by mono zou
        email                : zou_mono@sina.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import logging
import os

from PyQt5.QtCore import QEvent
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis._core import QgsMessageLog, Qgis, QgsProject, QgsMapLayerType, QgsWkbTypes

log = logging.getLogger('QGIS')

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'render_dlg_style.ui'))


class renderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, project, parent=None):
        """Constructor."""
        super(renderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.project: QgsProject = project

        # self.cmb_image_layer.view().pressed.connect(lambda: self.cmb_pressed('image'))
        # self.cmb_metro_network_layer.view().pressed.connect(lambda: self.cmb_pressed('network'))
        # self.cmb_metro_station_layer.view().pressed.connect(lambda: self.cmb_pressed('point'))
        # self.cmb_poi_layer.view().pressed.connect(lambda: self.cmb_pressed('point'))
        self.cmb_image_layer.installEventFilter(self)
        self.cmb_metro_network_layer.installEventFilter(self)
        self.cmb_metro_station_layer.installEventFilter(self)
        self.cmb_poi_layer.installEventFilter(self)

        self.button_box.clicked.connect(self.buttonBox_clicked)

        self.init_cmb_layers()

    def eventFilter(self,target,event):
        if event.type() == QEvent.MouseButtonPress:
            if target == self.cmb_image_layer:
                self.cmb_pressed('image')
            elif target == self.cmb_metro_network_layer:
                self.cmb_pressed('network')
            elif target == self.cmb_metro_station_layer or target == self.cmb_poi_layer:
                self.cmb_pressed('point')

        return False

    def init_cmb_layers(self, cname=None):
        if self.project.mapLayers() is None:
            return

        if cname is None:
            self.cmb_image_layer.clear()
            self.cmb_metro_network_layer.clear()
            self.cmb_metro_station_layer.clear()

            layer_names_ras = [""]
            layer_names_vec_polyline = [""]
            layer_names_vec_point = [""]
            layer_names_vec_polygon = [""]

            for layer in self.project.mapLayers().values():
                node = self.project.layerTreeRoot().findLayer(layer.id())
                if layer.type() == QgsMapLayerType.RasterLayer and node.isVisible():
                    layer_names_ras.append(layer.name())
                elif layer.type() == QgsMapLayerType.VectorLayer and node.isVisible() and \
                        layer.geometryType() == QgsWkbTypes.GeometryType.LineGeometry:
                    layer_names_vec_polyline.append(layer.name())
                elif layer.type() == QgsMapLayerType.VectorLayer and node.isVisible() and \
                        layer.geometryType() == QgsWkbTypes.GeometryType.PointGeometry:
                    layer_names_vec_point.append(layer.name())

            self.cmb_image_layer.addItems(layer_names_ras)
            self.cmb_metro_network_layer.addItems(layer_names_vec_polyline)
            self.cmb_metro_station_layer.addItems(layer_names_vec_point)
            self.cmb_poi_layer.addItems(layer_names_vec_point)

        elif cname == 'image':
            self.cmb_image_layer.clear()
            layer_names = [""]
            for layer in self.project.mapLayers().values():
                node = self.project.layerTreeRoot().findLayer(layer.id())
                if layer.type() == QgsMapLayerType.RasterLayer and node.isVisible():
                    layer_names.append(layer.name())
            self.cmb_image_layer.addItems(layer_names)
        elif cname == 'network':
            self.cmb_metro_network_layer.clear()
            layer_names = [""]
            for layer in self.project.mapLayers().values():
                node = self.project.layerTreeRoot().findLayer(layer.id())
                if layer.type() == QgsMapLayerType.VectorLayer and node.isVisible():
                    if layer.geometryType() == QgsWkbTypes.GeometryType.LineGeometry:
                        layer_names.append(layer.name())
            self.cmb_metro_network_layer.addItems(layer_names)
        elif cname == 'point':
            self.cmb_metro_station_layer.clear()
            self.cmb_poi_layer.clear()
            layer_names = [""]
            for layer in self.project.mapLayers().values():
                if layer.type() == QgsMapLayerType.VectorLayer:
                    if layer.geometryType() == QgsWkbTypes.GeometryType.PointGeometry:
                        layer_names.append(layer.name())
            self.cmb_poi_layer.addItems(layer_names)
            self.cmb_metro_station_layer.addItems(layer_names)

    def cmb_pressed(self, cname):
        # QgsMessageLog.logMessage("changed", tag="Plugins", level=Qgis.MessageLevel.Warning)
        self.init_cmb_layers(cname)

    def buttonBox_clicked(self):
        pass
        # QgsMessageLog.logMessage("clicked", level=Qgis.MessageLevel.Info)
